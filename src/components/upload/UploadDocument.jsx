// src/components/Upload/UploadDocument.jsx
import React, { useState, useRef } from 'react';
import { Upload, FileText, CheckCircle, AlertCircle, X } from 'lucide-react';
import { formatFileSize, getFileIcon, validateFileSize } from '../../utils/helpers';
import { FILE_TYPES, FILE_SIZE_LIMITS, SUCCESS_MESSAGES, ERROR_MESSAGES } from '../../utils/constants';
import GlassCard from '../common/GlassCard';

const UploadDocument = ({ onUploadSuccess, onUploadError }) => {
  const [files, setFiles] = useState([]);
  const [uploading, setUploading] = useState(false);
  const [dragActive, setDragActive] = useState(false);
  const fileInputRef = useRef(null);

  // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (‡∏°‡∏≤‡∏à‡∏≤‡∏Å constants)
  const allowedTypes = {
    'application/pdf': FILE_TYPES.DOCUMENT.PDF,
    'application/msword': FILE_TYPES.DOCUMENT.DOC,
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': FILE_TYPES.DOCUMENT.DOCX,
    'application/vnd.ms-powerpoint': FILE_TYPES.PRESENTATION.PPT,
    'application/vnd.openxmlformats-officedocument.presentationml.presentation': FILE_TYPES.PRESENTATION.PPTX,
    'text/plain': FILE_TYPES.DOCUMENT.TXT
  };

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå (‡πÉ‡∏ä‡πâ helper function)
  const validateFile = (file) => {
    const errors = [];
    
    if (!allowedTypes[file.type]) {
      errors.push(ERROR_MESSAGES.FILE_TYPE_NOT_SUPPORTED);
    }
    
    if (file.size > FILE_SIZE_LIMITS.DOCUMENT) {
      errors.push(ERROR_MESSAGES.FILE_TOO_LARGE);
    }
    
    return errors;
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
  const handleFileSelect = (selectedFiles) => {
    const fileArray = Array.from(selectedFiles);
    const validFiles = [];

    fileArray.forEach(file => {
      const errors = validateFile(file);
      const fileObj = {
        id: Date.now() + Math.random(),
        file: file,
        name: file.name,
        size: file.size,
        type: file.type,
        errors: errors,
        status: errors.length > 0 ? 'error' : 'ready',
        progress: 0
      };
      validFiles.push(fileObj);
    });

    setFiles(prev => [...prev, ...validFiles]);
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Drag & Drop
  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFileSelect(e.dataTransfer.files);
    }
  };

  // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
  const removeFile = (id) => {
    setFiles(prev => prev.filter(file => file.id !== id));
  };

  // ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
  const uploadFiles = async () => {
    const validFiles = files.filter(f => f.status === 'ready');
    if (validFiles.length === 0) return;

    setUploading(true);

    for (const fileObj of validFiles) {
      try {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô uploading
        setFiles(prev => prev.map(f => 
          f.id === fileObj.id 
            ? { ...f, status: 'uploading', progress: 0 }
            : f
        ));

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á FormData
        const formData = new FormData();
        formData.append('file', fileObj.file);
        formData.append('title', fileObj.name.replace(/\.[^/.]+$/, "")); // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
        formData.append('documentType', getDocumentType(fileObj.type));
        formData.append('owner', '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏™‡∏°‡∏ä‡∏≤‡∏¢'); // ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å user session
        formData.append('subject', '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏°‡∏≠‡∏†‡∏≤‡∏Ñ‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤');
        formData.append('description', '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö EduConnect');

        // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
        await simulateUpload(fileObj.id);
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await saveToDatabase(fileObj, formData);

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô success
        setFiles(prev => prev.map(f => 
          f.id === fileObj.id 
            ? { ...f, status: 'success', progress: 100 }
            : f
        ));

        // Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if (onUploadSuccess) {
          onUploadSuccess(fileObj, response);
        }

      } catch (error) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô error
        setFiles(prev => prev.map(f => 
          f.id === fileObj.id 
            ? { ...f, status: 'error', errors: [ERROR_MESSAGES.NETWORK_ERROR] }
            : f
        ));

        // Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        if (onUploadError) {
          onUploadError(error);
        }
      }
    }

    setUploading(false);
  };

  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î
  const simulateUpload = (fileId) => {
    return new Promise((resolve) => {
      let progress = 0;
      const interval = setInterval(() => {
        progress += 10;
        setFiles(prev => prev.map(f => 
          f.id === fileId 
            ? { ...f, progress }
            : f
        ));
        
        if (progress >= 100) {
          clearInterval(interval);
          resolve();
        }
      }, 200);
    });
  };

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const saveToDatabase = async (fileObj, formData) => {
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á API call
    const response = await fetch('/api/documents/upload', {
      method: 'POST',
      body: formData
    });

    if (!response.ok) {
      throw new Error('Failed to upload');
    }

    return response.json();
  };

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  const getDocumentType = (mimeType) => {
    if (mimeType.includes('pdf')) return '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ';
    if (mimeType.includes('word')) return '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö';
    if (mimeType.includes('powerpoint')) return '‡∏™‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô';
    return '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ';
  };

  return (
    <GlassCard className="max-w-4xl mx-auto p-8">
      <h2 className="text-2xl font-bold text-white mb-6 text-center">
        üìö ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
      </h2>

        {/* ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà Drop Zone */}
        <div
          className={`relative border-2 border-dashed rounded-2xl p-12 text-center transition-all duration-300 ${
            dragActive 
              ? 'border-white bg-white/20' 
              : 'border-white/40 hover:border-white/60 hover:bg-white/10'
          }`}
          onDragEnter={handleDrag}
          onDragLeave={handleDrag}
          onDragOver={handleDrag}
          onDrop={handleDrop}
        >
          <input
            ref={fileInputRef}
            type="file"
            multiple
            accept=".pdf,.doc,.docx,.ppt,.pptx,.txt"
            onChange={(e) => handleFileSelect(e.target.files)}
            className="hidden"
          />
          
          <Upload className="mx-auto h-16 w-16 text-white/70 mb-4" />
          <h3 className="text-xl font-semibold text-white mb-2">
            ‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
          </h3>
          <p className="text-white/80 mb-4">
            ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå: PDF, DOC, DOCX, PPT, PPTX, TXT (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10MB)
          </p>
          
          <button
            onClick={() => fileInputRef.current?.click()}
            className="px-6 py-3 bg-white/20 text-white rounded-xl hover:bg-white/30 transition-colors font-medium backdrop-blur-sm border border-white/30"
          >
            ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
          </button>
        </div>

        {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
        {files.length > 0 && (
          <div className="mt-8">
            <h3 className="text-lg font-semibold text-gray-700 mb-4">
              ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ({files.length})
            </h3>
            
            <div className="space-y-3">
              {files.map((file) => (
                <div key={file.id} className="bg-gray-50 rounded-xl p-4 border">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3 flex-1">
                      <span className="text-2xl">{getFileIcon(file.type)}</span>
                      <div className="flex-1 min-w-0">
                        <p className="font-medium text-gray-900 truncate">
                          {file.name}
                        </p>
                        <p className="text-sm text-gray-500">
                          {formatFileSize(file.size)}
                        </p>
                        
                        {/* Progress Bar */}
                        {file.status === 'uploading' && (
                          <div className="mt-2">
                            <div className="bg-gray-200 rounded-full h-2">
                              <div 
                                className="bg-purple-600 h-2 rounded-full transition-all duration-300"
                                style={{ width: `${file.progress}%` }}
                              ></div>
                            </div>
                            <p className="text-xs text-gray-500 mt-1">
                              ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î {file.progress}%
                            </p>
                          </div>
                        )}
                        
                        {/* Error Messages */}
                        {file.errors.length > 0 && (
                          <div className="mt-2">
                            {file.errors.map((error, index) => (
                              <p key={index} className="text-sm text-red-600 flex items-center">
                                <AlertCircle className="h-4 w-4 mr-1" />
                                {error}
                              </p>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      {/* Status Icon */}
                      {file.status === 'success' && (
                        <CheckCircle className="h-5 w-5 text-green-500" />
                      )}
                      {file.status === 'error' && (
                        <AlertCircle className="h-5 w-5 text-red-500" />
                      )}
                      
                      {/* Remove Button */}
                      <button
                        onClick={() => removeFile(file.id)}
                        className="p-1 text-gray-400 hover:text-red-500 transition-colors"
                        disabled={file.status === 'uploading'}
                      >
                        <X className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {/* Upload Button */}
            <div className="mt-6 flex justify-end space-x-4">
              <button
                onClick={() => setFiles([])}
                className="px-6 py-3 text-white/80 border border-white/30 rounded-xl hover:bg-white/10 transition-colors backdrop-blur-sm"
                disabled={uploading}
              >
                ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              </button>
              
              <button
                onClick={uploadFiles}
                disabled={uploading || files.filter(f => f.status === 'ready').length === 0}
                className="px-8 py-3 bg-green-500/80 text-white rounded-xl hover:bg-green-500 transition-colors font-medium disabled:bg-gray-400/50 disabled:cursor-not-allowed backdrop-blur-sm"
              >
                {uploading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î...' : '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå'}
              </button>
            </div>
          </div>
        )}

        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */}
        <div className="mt-8 p-6 bg-white/10 rounded-xl backdrop-blur-sm border border-white/20">
          <h4 className="font-semibold text-white mb-2">üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</h4>
          <ul className="text-sm text-white/80 space-y-1">
            <li>‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</li>
            <li>‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</li>
            <li>‚Ä¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô</li>
            <li>‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</li>
          </ul>
        </div>
    </GlassCard>
  );
};

export default UploadDocument;